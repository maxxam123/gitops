on:
 push:
   branches:
   - main
   paths:
   - '01_infra/01_vpc/aws/02_aws_vpc/terraform.tfvars'

env:
 AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
 GITHUB: ${{ secrets.GITHUB }}

jobs:
 build:
   name: "test"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       working-directory: 01_infra/01_vpc/aws/02_aws_vpc/
   steps:
     - name: test
       uses: actions/checkout@v3

     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.3.0

     - name: Terraform init
       id: init
       run: |
         cp ../../../../02_tmp/01_vpc/aws/03_main.tf .
         cp ../../../../02_tmp/01_vpc/aws/06_sa.yaml .
         mkdir values
         cp -r ../../../../02_tmp/01_vpc/aws/values/* values/
         ls values
         pip install awscli
         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
         aws configure set default.region "eu-central-1"
         aws s3 ls
         aws eks update-kubeconfig --region eu-central-1 --name dev-demo
         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
         chmod +x kubectl
         mkdir -p ~/.local/bin
         cp ./kubectl ~/.local/bin/kubectl
         ./kubectl get nodes
         https=$(cat ~/.kube/config | grep server | awk '{print $2}')
         echo $https
         httpss=$(cut -c9- <<< $https)
         echo $httpss

         sed -i -e "s/HTTPS/$httpss/g" 02-aws-vpc-app.yaml
         ls -la
         cp 02-aws-vpc-app.yaml ../../../../
         ls ../../../../
         
         ARN=$(kubectl config get-contexts | grep dev-demo | awk '{print $2}')
         aws eks update-kubeconfig --region eu-central-1 --name staging-demo
         PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo)
         echo PASSWORD
         which curl
         curl -LO https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
         ls -la
         chmod +x argocd-linux-amd64
         cp ./argocd-linux-amd64 ~/.local/bin/argocd
         which argocd
         server=$(kubectl get pods -n argocd | grep argocd-server | awk '{print $1}')
         echo $server
         kubectl exec -it $server -n argocd -- sh -c "argocd login localhost:8080 --username admin --password $PASSWORD --insecure;argocd cluster add $ARN --name 02_aws_vpc"
         
     - name: Pushes applicationset file
       uses: dmnemec/copy_file_to_another_repo_action@main
       env:
         API_TOKEN_GITHUB: ${{ secrets.PLAT04 }}
       with:
         source_file: '02-aws-vpc-app.yaml'
         destination_repo: 'maxxam123/upstream'
         destination_folder: 'apps'
         user_email: 'hennighausenmax@email.com'
         user_name: 'maxxam123'
         commit_message: 'A custom message for the commit'

         # curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
         # chmod +x /usr/local/bin/argocd

       # terraform init -backend-config="bucket=dunhuang-gansu-terraform-state"
       # terraform plan -lock=false

         # ./kubectl apply -f 06_sa.yaml
         
         # name="argocd-manager-token"
         # ARN=$(kubectl config get-contexts | grep dev-demo | awk '{print $2}')
         # ca=$(kubectl get --context $ARN -n kube-system secret/$name -o jsonpath='{.data.ca\.crt}')
         # token=$(kubectl get --context $ARN -n kube-system secret/$name -o jsonpath='{.data.token}' | base64 --decode)
         
         # echo $https
         # httpss=$(cut -c9- <<< $https)
         # echo $httpss
         # sed -i -e "s/HTTPS/$httpss/g" 02-aws-vpc.yaml
         # sed -i -e "s/CERTIFICATE/$ca/g" 02-aws-vpc.yaml
         # sed -i -e "s/TOKEN/$token/g" 02-aws-vpc.yaml
