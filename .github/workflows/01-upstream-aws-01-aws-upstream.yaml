on:
 push:
   branches:
   - main
   paths:
   - '01_infraaaaaaaaaa/01-upstream/aws/01-aws-upstream/terraform.tfvars'
   - '01_infraaaaaaaaaa/01-upstream/aws/01-aws-upstream/gitops'

env:
 AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
 GITHUB: ${{ secrets.GITHUB }}
 AWS_VELERO_01: ${{ secrets.VELERO01 }}
 AWS_VELERO_02: ${{ secrets.VELERO02 }}
 AWS_VELERO_03: ${{ secrets.VELERO03 }}

jobs:
 build:
   name: "test"
   runs-on: ubuntu-latest
   defaults:
     run:
       shell: bash
       working-directory: 01_infra/01-upstream/aws/01-aws-upstream/
   steps:
     - name: test
       uses: actions/checkout@v3

     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.3.0

     - name: apply app-of-apps
       run: |
         cp 01-aws-upstream-app.yaml ../../../../

     - name: Pushes applicationset file
       uses: dmnemec/copy_file_to_another_repo_action@main
       env:
         API_TOKEN_GITHUB: ${{ secrets.PLAT04 }}
       with:
         source_file: '01-aws-upstream-app.yaml'
         destination_repo: 'maxxam123/upstream'
         destination_folder: 'apps'
         user_email: 'hennighausenmax@email.com'
         user_name: 'maxxam123'
         commit_message: 'A custom message for the commit'

     # - name: apply app-of-bootstrap
     #   run: |
     #     cp 01-aws-upstream-app-02.yaml ../../../../

     # - name: Pushes bootstrap files
     #   uses: dmnemec/copy_file_to_another_repo_action@main
     #   env:
     #     API_TOKEN_GITHUB: ${{ secrets.PLAT04 }}
     #   with:
     #     source_file: '01-aws-upstream-app-02.yaml'
     #     destination_repo: 'maxxam123/upstream'
     #     destination_folder: 'test'
     #     user_email: 'hennighausenmax@email.com'
     #     user_name: 'maxxam123'
     #     commit_message: 'A custom message for the commit'
         
     - name: Terraform init
       id: init
       run: |
         cp ../../../../02_tmp/10_eks/aws/03_main.tf .
         cp ../../../../02_tmp/10_eks/aws/02_variables.tf .
         cp ../../../../02_tmp/10_eks/aws/namespace.yaml .
         cp ../../../../02_tmp/10_eks/aws/05_secretstore.yaml .
         mkdir iam
         cp -r ../../../../02_tmp/10_eks/aws/iam/* iam/
         echo ONE
         
         pip install awscli
         aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
         aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
         aws configure set default.region "eu-central-1"
         
         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
         chmod +x kubectl
         mkdir -p ~/.local/bin
         cp ./kubectl ~/.local/bin/kubectl
         
         curl -O https://get.helm.sh/helm-v3.16.2-linux-amd64.tar.gz
         tar xvf helm-v3.16.2-linux-amd64.tar.gz
         cp linux-amd64/helm /usr/local/bin
         
         aws eks update-kubeconfig --region eu-central-1 --name 01-aws-upstream-staging
         echo TWO

         kubectl get ns > test_02.yaml
         ARGO=$( sed -n 2p test_02.yaml | awk '{print $1}' )
         echo $ARGO
         if [ $ARGO == "argocd" ]; then
           echo UPGRADE
           mkdir -p charts/external-secrets/charts
           cp -r ../../../../04_git/aws/01-upstream/01-aws-upstream/01_bootstrap/eso/charts/* charts/
           touch charts/external-secrets/.helmignore
           helm dep update charts/external-secrets/
           helm upgrade external-secrets charts/external-secrets/ -n external-secrets
           
           mkdir -p charts/argo-cd/charts
           cp -r ../../../../04_git/aws/01-upstream/01-aws-upstream/01_bootstrap/argo/charts/* charts/
           touch charts/argo-cd/.helmignore
           helm dep update charts/argo-cd/
           helm upgrade argo-cd charts/argo-cd/ -n default
         else
           echo INSTALL
           ./kubectl apply -f namespace.yaml
           mkdir -p charts/external-secrets/charts
           cp -r ../../../../04_git/aws/01-upstream/01-aws-upstream/01_bootstrap/eso/charts/* charts/
           touch charts/external-secrets/.helmignore
           helm dep update charts/external-secrets/
           helm install external-secrets charts/external-secrets/ -n external-secrets
           ./kubectl create secret generic awssm-secret --from-literal=username=$AWS_ACCESS_KEY_ID --from-literal=password=$AWS_SECRET_ACCESS_KEY
           sleep 40
           ./kubectl apply -f 05_secretstore.yaml
           
           mkdir -p charts/argo-cd/charts
           cp -r ../../../../04_git/aws/01-upstream/01-aws-upstream/01_bootstrap/argo/charts/* charts/
           touch charts/argo-cd/.helmignore
           helm dep update charts/argo-cd/
           echo THREE
           helm install argo-cd charts/argo-cd/ -n default
           echo FOUR
           sleep 60
           ./kubectl apply -f application-upstream.yaml

           echo $AWS_VELERO_01 >> test_02
           echo $AWS_VELERO_02 >> test_02
           echo $AWS_VELERO_03 >> test_02
           ./kubectl create secret generic -n velero velero-secret --from-file=cloud=./test_02
         fi
         ./kubectl apply -f application-downstream.yaml
         

         
         
       # ./kubectl create secret generic awssm-secret --from-literal=username=$AWS_ACCESS_KEY_ID --from-literal=password=$AWS_SECRET_ACCESS_KEY
       # ./kubectl create secret generic remote-repo --from-literal=type="git" --from-literal=url="https://github.com/maxxam123/upstream.git" --from-literal=username="maxxam123" --from-literal=password=$GITHUB -n argocd
       # ./kubectl -n argocd label secret remote-repo argocd.argoproj.io/secret-type=repository 
       
     #     cp 03-aws-eks-app.yaml ../../../../

     # - name: Pushes applicationset file
     #   uses: dmnemec/copy_file_to_another_repo_action@main
     #   env:
     #     API_TOKEN_GITHUB: ${{ secrets.PLAT04 }}
     #   with:
     #     source_file: '03-aws-eks-app.yaml'
     #     destination_repo: 'maxxam123/upstream'
     #     destination_folder: 'apps'
     #     user_email: 'hennighausenmax@email.com'
     #     user_name: 'maxxam123'
     #     commit_message: 'A custom message for the commit'

         
       # terraform init -backend-config="bucket=dunhuang-gansu-terraform-state"
       # terraform plan -lock=false

       #  https=$(cat ~/.kube/config | grep server | awk '{print $2}')
       #  echo $https
       #  httpss=$(cut -c9- <<< $https)
       #  echo $httpss

       #  sed -i -e "s/HTTPS/$httpss/g" 03-aws-eks-app.yaml
       #  ls -la
       #  cp 03-aws-eks-app.yaml ../../../../
       #  ls ../../../../

     # - name: Pushes applicationset file
     #   uses: dmnemec/copy_file_to_another_repo_action@main
     #   env:
     #     API_TOKEN_GITHUB: ${{ secrets.PLAT04 }}
     #   with:
     #     source_file: '03-aws-eks-app.yaml'
     #     destination_repo: 'maxxam123/upstream'
     #     destination_folder: 'apps'
     #     user_email: 'hennighausenmax@email.com'
     #     user_name: 'maxxam123'
     #     commit_message: 'A custom message for the commit'
         

     # - name: Terraform Plan
     #   run: terraform plan -lock=false

     #- name: Terraform Apply
     #  run: terraform apply -auto-approve -input=false -lock=false

     # cp ../../../../02_tmp/10_eks/aws/08_autoscaler.tf .
     # cp ../../../../02_tmp/10_eks/aws/09_efs.tf .
     # cp ../../../../02_tmp/10_eks/aws/10_secdriver.tf .
